#include<iostream>
#include<string>
using namespace std;
//设计立方体类
class Cube
{
	//属性
private:
	int m_L, m_W, m_H;
public:
	void SetCube()
	{
		cin >> m_L >> m_W >> m_H;
	}
	int GetL()
	{
		return m_L;
	}
	int GetW()
	{
		return m_W;
	}
	int GetH()
	{
		return m_H;
	}
	int CalcuS()
	{
		return 2 * (m_L * m_H + m_L * m_W + m_H * m_W);
	}
	int CalcuV()
	{
		return m_H * m_L * m_W;
	}
	//利用成员函数判断两个立方体是否相等
	bool is_Same(Cube& c2)
	{
		if (m_L == c2.GetL() && m_H == c2.GetH() && m_W == c2.GetW())
		{
			return true;
		}
		else return false;
	}
};
//利用全局函数判断两个函数是否相等
bool isSame(Cube& c1, Cube& c2)
{
	if (c1.GetL() == c2.GetL() && c1.GetH() == c2.GetH() && c1.GetW() == c2.GetW())
	{
		return true;
	}
	else return false;
}
int main()
{
	Cube c1;
	
	c1.SetCube();
	cout << "c1的面积为：" << c1.CalcuS() << endl;
	cout << "c1的体积为：" << c1.CalcuV() << endl;
	//创建第二个立方体
	Cube c2;
	c2.SetCube();
	if (isSame(c1, c2) == 0)
	{
		cout << "全局不相等" << endl;
	}
	else cout << "全局相等" << endl;
	if (c1.is_Same(c2) == 0)
	{
		cout << "成员不相等" << endl;
	}
	else cout << "成员相等" << endl;
	system("pause");
	return 0;	
}
